;; vi: ft=lisp
;; Home row mods QWERTY example with more complexity.
;; Some of the changes from the basic example:
;; - when a home row mod activates tap, the home row mods are disabled
;;   while continuing to type rapidly
;; - tap-hold-release helps make the hold action more responsive
;; - pressing another key on the same half of the keyboard
;;   as the home row mod will activate an early tap action

(defsrc
  esc caps
  `   1   2   3   4   5   6   7   8   9   0   -   =
  q   w   e   r   t   y   u   i   o   p   [   ]   \
  a   s   d   f   h   j   k   l   ;
  spc
  lsft rsft
  lctl rctl
  lmet rmet
  lalt ralt
  left down up right
)

(defvar
  ;; Note: consider using different time values for your different fingers.
  ;; For example, your pinkies might be slower to release keys and index
  ;; fingers faster.
  tap-time 150
  hold-time 150

  left-hand-keys (
    ;; 1 2 3 4 5
    ;; q w e r t
    ;; a s d f g
    ;; z x c v b
  )
  right-hand-keys (
    ;; 6 7 8 9 0 - = `
    ;; y u i o p [ ] \
    ;; h j k l ; '
    ;; n m , . /
  )
)

(deffakekeys
  to-base (layer-switch base)
)

(defalias
  tap (multi
    (layer-switch nomods)
    (on-idle-fakekey to-base tap 20)
  )

  ;;a (tap-hold-release $tap-time $hold-time (multi a @tap) lctl)
  ;;s (tap-hold-release $tap-time $hold-time (multi s @tap) lmet)
  ;;d (tap-hold-release $tap-time $hold-time (multi d @tap) lalt)
  ;;f (tap-hold-release $tap-time $hold-time (multi f @tap) lsft)

  ;;j (tap-hold-release $tap-time $hold-time (multi j @tap) rsft)
  ;;k (tap-hold-release $tap-time $hold-time (multi k @tap) ralt)
  ;;l (tap-hold-release $tap-time $hold-time (multi l @tap) rmet)
  ;;; (tap-hold-release $tap-time $hold-time (multi ; @tap) rctl)

  a (tap-hold $tap-time $hold-time a lctl)
  s (tap-hold $tap-time $hold-time s lmet)
  d (tap-hold $tap-time $hold-time d lalt)
  f (tap-hold $tap-time $hold-time f lsft)

  j (tap-hold $tap-time $hold-time j rsft)
  k (tap-hold $tap-time $hold-time k ralt)
  l (tap-hold $tap-time $hold-time l rmet)
  ; (tap-hold $tap-time $hold-time ; rctl)

  ;; Mouse Wheel Actions
  mwu (mwheel-up $hold-time 120)
  mwd (mwheel-down $hold-time 120)
  mwl (mwheel-left $hold-time 120)
  mwr (mwheel-right $hold-time 120)

  spc  (tap-hold-release 0 $hold-time spc (layer-while-held nums))
  arrows (tap-hold-release 0 $hold-time lalt (layer-while-held arrows))
  wheels (tap-hold-release 0 $hold-time ralt (layer-while-held wheels))
)

(deflayer base
  caps esc
  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX
  q   w   e   r   t   y   u   i   o   p   [   ]   \
  @a  @s  @d  @f  h   @j  @k  @l  @;
  @spc
  spc XX
  XX (layer-switch default)
  XX XX
  @arrows @wheels
  XX XX XX XX
)

(deflayer nomods
  caps esc
  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX
  q   w   e   r   t   y   u   i   o   p   [   ]   \
  a   s   d   f   h   j   k   l   ;
  spc
  XX XX
  XX XX
  XX XX
  XX XX
  XX XX XX XX
)

(deflayer nums
  caps esc
  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX
  1   2   3   4   5   6   7   8   9   0   -   =   `
  @a  @s  @d  @f  h   @j  @k  @l  @;
  spc
  XX XX
  XX (layer-switch default)
  XX XX
  XX XX
  XX XX XX XX
)

(deflayer arrows
  caps esc
  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX
  q   w   e   r   t   y   u   i   o   p   [   ]   \
  @a  @s  @d  @f  left down up right ;
  spc
  XX XX
  XX (layer-switch default)
  XX XX
  XX XX
  XX XX XX XX
)

(deflayer wheels
  caps esc
  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX
  q   w   e   r   t   y   u   i   o   p   [   ]   \
  @a  @s  @d  @f  @mwl @mwd @mwu @mwr ;
  spc
  XX XX
  XX (layer-switch default)
  XX XX
  XX XX
  XX XX XX XX
)

(deflayer default
  caps esc
  `   1   2   3   4   5   6   7   8   9   0   -   =
  q   w   e   r   t   y   u   i   o   p   [   ]   \
  a   s   d   f   h   j   k   l   ;
  spc
  lsft rsft
  lctl (layer-switch base)
  lmet rmet
  lalt ralt
  left down up right
)
